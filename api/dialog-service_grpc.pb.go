// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: dialog-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DialogsClient is the client API for Dialogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogsClient interface {
	Dialogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DialogsResponse, error)
	Dialog(ctx context.Context, in *DialogRequest, opts ...grpc.CallOption) (*DialogResponse, error)
	AddDialog(ctx context.Context, in *AddDialogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DialogAnswers(ctx context.Context, in *DialogAnswersRequest, opts ...grpc.CallOption) (*DialogAnswersResponse, error)
	AddDialogAnswer(ctx context.Context, in *AddDialogAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dialogsClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogsClient(cc grpc.ClientConnInterface) DialogsClient {
	return &dialogsClient{cc}
}

func (c *dialogsClient) Dialogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DialogsResponse, error) {
	out := new(DialogsResponse)
	err := c.cc.Invoke(ctx, "/dialogsv1.Dialogs/Dialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogsClient) Dialog(ctx context.Context, in *DialogRequest, opts ...grpc.CallOption) (*DialogResponse, error) {
	out := new(DialogResponse)
	err := c.cc.Invoke(ctx, "/dialogsv1.Dialogs/Dialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogsClient) AddDialog(ctx context.Context, in *AddDialogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dialogsv1.Dialogs/AddDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogsClient) DialogAnswers(ctx context.Context, in *DialogAnswersRequest, opts ...grpc.CallOption) (*DialogAnswersResponse, error) {
	out := new(DialogAnswersResponse)
	err := c.cc.Invoke(ctx, "/dialogsv1.Dialogs/DialogAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogsClient) AddDialogAnswer(ctx context.Context, in *AddDialogAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dialogsv1.Dialogs/AddDialogAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogsServer is the server API for Dialogs service.
// All implementations must embed UnimplementedDialogsServer
// for forward compatibility
type DialogsServer interface {
	Dialogs(context.Context, *emptypb.Empty) (*DialogsResponse, error)
	Dialog(context.Context, *DialogRequest) (*DialogResponse, error)
	AddDialog(context.Context, *AddDialogRequest) (*emptypb.Empty, error)
	DialogAnswers(context.Context, *DialogAnswersRequest) (*DialogAnswersResponse, error)
	AddDialogAnswer(context.Context, *AddDialogAnswerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDialogsServer()
}

// UnimplementedDialogsServer must be embedded to have forward compatible implementations.
type UnimplementedDialogsServer struct {
}

func (UnimplementedDialogsServer) Dialogs(context.Context, *emptypb.Empty) (*DialogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dialogs not implemented")
}
func (UnimplementedDialogsServer) Dialog(context.Context, *DialogRequest) (*DialogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dialog not implemented")
}
func (UnimplementedDialogsServer) AddDialog(context.Context, *AddDialogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDialog not implemented")
}
func (UnimplementedDialogsServer) DialogAnswers(context.Context, *DialogAnswersRequest) (*DialogAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogAnswers not implemented")
}
func (UnimplementedDialogsServer) AddDialogAnswer(context.Context, *AddDialogAnswerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDialogAnswer not implemented")
}
func (UnimplementedDialogsServer) mustEmbedUnimplementedDialogsServer() {}

// UnsafeDialogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogsServer will
// result in compilation errors.
type UnsafeDialogsServer interface {
	mustEmbedUnimplementedDialogsServer()
}

func RegisterDialogsServer(s grpc.ServiceRegistrar, srv DialogsServer) {
	s.RegisterService(&Dialogs_ServiceDesc, srv)
}

func _Dialogs_Dialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogsServer).Dialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogsv1.Dialogs/Dialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogsServer).Dialogs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dialogs_Dialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogsServer).Dialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogsv1.Dialogs/Dialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogsServer).Dialog(ctx, req.(*DialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dialogs_AddDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogsServer).AddDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogsv1.Dialogs/AddDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogsServer).AddDialog(ctx, req.(*AddDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dialogs_DialogAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialogAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogsServer).DialogAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogsv1.Dialogs/DialogAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogsServer).DialogAnswers(ctx, req.(*DialogAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dialogs_AddDialogAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDialogAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogsServer).AddDialogAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialogsv1.Dialogs/AddDialogAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogsServer).AddDialogAnswer(ctx, req.(*AddDialogAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dialogs_ServiceDesc is the grpc.ServiceDesc for Dialogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dialogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dialogsv1.Dialogs",
	HandlerType: (*DialogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dialogs",
			Handler:    _Dialogs_Dialogs_Handler,
		},
		{
			MethodName: "Dialog",
			Handler:    _Dialogs_Dialog_Handler,
		},
		{
			MethodName: "AddDialog",
			Handler:    _Dialogs_AddDialog_Handler,
		},
		{
			MethodName: "DialogAnswers",
			Handler:    _Dialogs_DialogAnswers_Handler,
		},
		{
			MethodName: "AddDialogAnswer",
			Handler:    _Dialogs_AddDialogAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dialog-service.proto",
}
