// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: counter-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterClient interface {
	PrivateDialogsCounters(ctx context.Context, in *PrivateDialogsCountersRequest, opts ...grpc.CallOption) (*PrivateDialogsCountersResponse, error)
	ResetPrivateDialogCounter(ctx context.Context, in *ResetPrivateDialogCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type counterClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterClient(cc grpc.ClientConnInterface) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) PrivateDialogsCounters(ctx context.Context, in *PrivateDialogsCountersRequest, opts ...grpc.CallOption) (*PrivateDialogsCountersResponse, error) {
	out := new(PrivateDialogsCountersResponse)
	err := c.cc.Invoke(ctx, "/counter.Counter/PrivateDialogsCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) ResetPrivateDialogCounter(ctx context.Context, in *ResetPrivateDialogCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counter.Counter/ResetPrivateDialogCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServer is the server API for Counter service.
// All implementations must embed UnimplementedCounterServer
// for forward compatibility
type CounterServer interface {
	PrivateDialogsCounters(context.Context, *PrivateDialogsCountersRequest) (*PrivateDialogsCountersResponse, error)
	ResetPrivateDialogCounter(context.Context, *ResetPrivateDialogCounterRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCounterServer()
}

// UnimplementedCounterServer must be embedded to have forward compatible implementations.
type UnimplementedCounterServer struct {
}

func (UnimplementedCounterServer) PrivateDialogsCounters(context.Context, *PrivateDialogsCountersRequest) (*PrivateDialogsCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateDialogsCounters not implemented")
}
func (UnimplementedCounterServer) ResetPrivateDialogCounter(context.Context, *ResetPrivateDialogCounterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPrivateDialogCounter not implemented")
}
func (UnimplementedCounterServer) mustEmbedUnimplementedCounterServer() {}

// UnsafeCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServer will
// result in compilation errors.
type UnsafeCounterServer interface {
	mustEmbedUnimplementedCounterServer()
}

func RegisterCounterServer(s grpc.ServiceRegistrar, srv CounterServer) {
	s.RegisterService(&Counter_ServiceDesc, srv)
}

func _Counter_PrivateDialogsCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDialogsCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).PrivateDialogsCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.Counter/PrivateDialogsCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).PrivateDialogsCounters(ctx, req.(*PrivateDialogsCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_ResetPrivateDialogCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPrivateDialogCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).ResetPrivateDialogCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counter.Counter/ResetPrivateDialogCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).ResetPrivateDialogCounter(ctx, req.(*ResetPrivateDialogCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Counter_ServiceDesc is the grpc.ServiceDesc for Counter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Counter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counter.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrivateDialogsCounters",
			Handler:    _Counter_PrivateDialogsCounters_Handler,
		},
		{
			MethodName: "ResetPrivateDialogCounter",
			Handler:    _Counter_ResetPrivateDialogCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter-service.proto",
}
